.TH "include/MD.h" 3 "IntelligentDestiller" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/MD.h \- Header file for the MD project\&.  

.SH SYNOPSIS
.br
.PP
\fR#include 'OS\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBALARM_TIME_ON\fP   600"
.br
.RI "TIMERS\&. "
.ti -1c
.RI "#define \fBALARM_TIME_OFF\fP   200"
.br
.ti -1c
.RI "#define \fBWIFI_MODE_OPTIONS\fP   1"
.br
.RI "WIFI SERVICE\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBsendWiFiQuality\fP ()"
.br
.RI "MiddleWare Header\&. "
.ti -1c
.RI "void \fBtoggleAutoMode\fP ()"
.br
.RI "Toggle the Auto Mode of the Machine using a switch connected to the ESP32 GPIO 4 (D4) "
.ti -1c
.RI "void \fBtoggleIndAuto\fP ()"
.br
.RI "Toggle the Auto Mode of the Machine\&. "
.ti -1c
.RI "void \fBindicatorsManagement\fP ()"
.br
.ti -1c
.RI "void \fBmodeManagement\fP ()"
.br
.ti -1c
.RI "void \fBupdateOutputsWeb\fP ()"
.br
.RI "Output variables image\&. "
.ti -1c
.RI "void \fBtoggleAutoModeWeb\fP ()"
.br
.RI "TOGGLES BLOCK\&. "
.ti -1c
.RI "void \fBtogglePumpWeb\fP ()"
.br
.RI "Toggle Pump Web\&. "
.ti -1c
.RI "void \fBtoggleValveWaterInWeb\fP ()"
.br
.RI "Toggle Valve Water In Web\&. "
.ti -1c
.RI "void \fBtoggleValveWaterOutWeb\fP ()"
.br
.RI "Toggle Valve Water Out Web\&. "
.ti -1c
.RI "void \fBtoggleResistorWeb\fP ()"
.br
.RI "Toggle Resistor Web\&. "
.ti -1c
.RI "void \fBsetAutoModeWeb\fP (bool state)"
.br
.RI "SETS BLOCK\&. "
.ti -1c
.RI "void \fBsetPumpWeb\fP (bool state)"
.br
.RI "Set the Pump object\&. "
.ti -1c
.RI "void \fBsetValveWaterInWeb\fP (bool state)"
.br
.RI "Set the Valve Water In object\&. "
.ti -1c
.RI "void \fBsetValveWaterOutWeb\fP (bool state)"
.br
.RI "Set the Valve Water Out object\&. "
.ti -1c
.RI "void \fBsetResistorWeb\fP (bool state)"
.br
.RI "Set the Resistor object\&. "
.ti -1c
.RI "bool \fBgetAutoModeWeb\fP ()"
.br
.RI "GETS BLOCK\&. "
.ti -1c
.RI "bool \fBgetPumpWeb\fP ()"
.br
.RI "Get the Pump object\&. "
.ti -1c
.RI "bool \fBgetValv_Water_InWeb\fP ()"
.br
.RI "Get the Ind Alarm object\&. "
.ti -1c
.RI "bool \fBgetValv_Water_OutWeb\fP ()"
.br
.RI "Get the Valv Water Out object\&. "
.ti -1c
.RI "bool \fBgetResistorWeb\fP ()"
.br
.RI "Get the Ind Min object\&. "
.ti -1c
.RI "String \fBhandleTimer\fP ()"
.br
.RI "Handlers\&. "
.ti -1c
.RI "String \fBhandleHour\fP ()"
.br
.RI "Handle Hour\&. "
.ti -1c
.RI "String \fBhandleMinute\fP ()"
.br
.RI "Handle Minute\&. "
.ti -1c
.RI "String \fBhandleSecound\fP ()"
.br
.RI "Handle Secound\&. "
.ti -1c
.RI "String \fBhandleWifiQuality\fP ()"
.br
.RI "Handlers for Wifi Quality, SSID, TX and IP\&. "
.ti -1c
.RI "String \fBhandleWifiSSID\fP ()"
.br
.RI "Handle Wifi SSID\&. "
.ti -1c
.RI "String \fBhandleWifiTX\fP ()"
.br
.RI "Handle Wifi TX\&. "
.ti -1c
.RI "String \fBhandleWifiIP\fP ()"
.br
.RI "Handle Wifi IP\&. "
.ti -1c
.RI "String \fBhandleTimeAdjust\fP (const String &adjustment)"
.br
.RI "Timer Add/Remove Time\&. "
.ti -1c
.RI "String \fBhandleTimerControl\fP (const String &control)"
.br
.RI "Timer Start/Stop/Reset\&. "
.ti -1c
.RI "String \fBhandleState\fP (const String &state)"
.br
.RI "Handlers for Auto, Pump, WaterOut, Resistor, WaterIn and WaterMax With Response\&. "
.ti -1c
.RI "String \fBhandleToggle\fP (const String &toggle)"
.br
.RI "Handlers for Toggle Auto, Pump, waterOut, Resistor, WaterIn and WaterMax\&. "
.ti -1c
.RI "String \fBprocessor\fP (const String &var)"
.br
.RI "Function to handle the HTTP requests for the variables\&. "
.ti -1c
.RI "long \fBwebTimer\fP (String op, int16_t amount)"
.br
.RI "Timer Functions calls\&. "
.ti -1c
.RI "int \fBgetTimerSecound\fP ()"
.br
.RI "Timer for web operations\&. "
.ti -1c
.RI "int \fBgetTimerMinute\fP ()"
.br
.RI "Get timer secound\&. "
.ti -1c
.RI "int \fBgetTimerHour\fP ()"
.br
.RI "Get timer minute\&. "
.ti -1c
.RI "bool \fBgetTimerStatus\fP ()"
.br
.RI "Get timer hour\&. "
.ti -1c
.RI "void \fBadd1s\fP ()"
.br
.RI "Get timer status\&. "
.ti -1c
.RI "void \fBadd5s\fP ()"
.br
.RI "Add 1 secound to timer\&. "
.ti -1c
.RI "void \fBadd10s\fP ()"
.br
.RI "Add 5 secounds to timer\&. "
.ti -1c
.RI "void \fBadd1m\fP ()"
.br
.RI "Add 10 secounds to timer\&. "
.ti -1c
.RI "void \fBadd5m\fP ()"
.br
.RI "Add 1 minute to timer\&. "
.ti -1c
.RI "void \fBadd10m\fP ()"
.br
.RI "Add 5 minutes to timer\&. "
.ti -1c
.RI "void \fBrem1s\fP ()"
.br
.RI "Add 10 minutes to timer\&. "
.ti -1c
.RI "void \fBrem5s\fP ()"
.br
.RI "Remove 1 secound from timer\&. "
.ti -1c
.RI "void \fBrem10s\fP ()"
.br
.RI "Remove 5 secounds from timer\&. "
.ti -1c
.RI "void \fBrem1m\fP ()"
.br
.RI "Remove 10 secounds from timer\&. "
.ti -1c
.RI "void \fBrem5m\fP ()"
.br
.RI "Remove 1 minute from timer\&. "
.ti -1c
.RI "void \fBrem10m\fP ()"
.br
.RI "Remove 5 minutes from timer\&. "
.ti -1c
.RI "void \fBresetTimer\fP ()"
.br
.RI "Remove 10 minutes from timer\&. "
.ti -1c
.RI "void \fBsetTimer\fP (bool stat)"
.br
.RI "Reset timer\&. "
.ti -1c
.RI "void \fBinitSerial\fP ()"
.br
.RI "Set timer status\&. "
.ti -1c
.RI "void \fBsPrint\fP (char *abc)"
.br
.RI "Inicia a serial\&. "
.ti -1c
.RI "void \fBsPrintLn\fP (char *abc)"
.br
.RI "Print string\&. "
.ti -1c
.RI "void \fBsPrintStr\fP (String abc)"
.br
.RI "Print string with new line\&. "
.ti -1c
.RI "void \fBsPrintNbr\fP (int nbr)"
.br
.RI "Print string\&. "
.ti -1c
.RI "void \fBsPrintLnStr\fP (String abc)"
.br
.RI "Print number\&. "
.ti -1c
.RI "void \fBsPrintLnNbr\fP (int nbr)"
.br
.RI "Print string with new line\&. "
.ti -1c
.RI "void \fBtest_IO\fP ()"
.br
.RI "Print number with new line\&. "
.ti -1c
.RI "bool \fBinitWIFI\fP ()"
.br
.RI "Initiate WiFi\&. "
.ti -1c
.RI "String \fBwifiQuality\fP ()"
.br
.RI "Inicia o wifi\&. "
.in -1c
.SH "Detailed Description"
.PP 
Header file for the MD project\&. 


.PP
\fBAuthor\fP
.RS 4
SÃ©rgio Carmo
.RE
.PP
\fBVersion\fP
.RS 4
1\&.0 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define ALARM_TIME_OFF   200"

.SS "#define ALARM_TIME_ON   600"

.PP
TIMERS\&. Defining timers for the alarm indicator blinking 
.SS "#define WIFI_MODE_OPTIONS   1"

.PP
WIFI SERVICE\&. WIFI Functions calls 
.SH "Function Documentation"
.PP 
.SS "void add10m ()"

.PP
Add 5 minutes to timer\&. Add 5 minutes to timer\&. 
.SS "void add10s ()"

.PP
Add 5 secounds to timer\&. Add 5 secounds to timer\&. 
.SS "void add1m ()"

.PP
Add 10 secounds to timer\&. Add 10 secounds to timer\&. 
.SS "void add1s ()"

.PP
Get timer status\&. Get timer status\&. 
.SS "void add5m ()"

.PP
Add 1 minute to timer\&. Add 1 minute to timer\&. 
.SS "void add5s ()"

.PP
Add 1 secound to timer\&. Add 1 secound to timer\&. 
.SS "bool getAutoModeWeb ()"

.PP
GETS BLOCK\&. Get the Ind Max object

.PP
This function returns the state of the max indicator\&.

.PP
\fBReturns\fP
.RS 4
true 

.PP
false 
.RE
.PP

.SS "bool getPumpWeb ()"

.PP
Get the Pump object\&. This function returns the state of the water pump\&.

.PP
\fBReturns\fP
.RS 4
true 

.PP
false 
.RE
.PP

.SS "bool getResistorWeb ()"

.PP
Get the Ind Min object\&. This function returns the state of the min indicator\&.

.PP
\fBReturns\fP
.RS 4
true 

.PP
false 
.RE
.PP

.SS "int getTimerHour ()"

.PP
Get timer minute\&. Get timer minute\&.

.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
Return the timer hours left in the timer
.SS "int getTimerMinute ()"

.PP
Get timer secound\&. Get timer secound\&.

.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
Return the timer minutes left in the timer
.SS "int getTimerSecound ()"

.PP
Timer for web operations\&. Timer for web operations\&.

.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
Return the timer seconds left in the timer 
.br

.SS "bool getTimerStatus ()"

.PP
Get timer hour\&. Get timer hour\&.

.PP
\fBNote\fP
.RS 4
This function is called by the processor function in AP_Destiller\&.cpp 
.RE
.PP
\fBReturns\fP
.RS 4
true 

.PP
false 
.RE
.PP
Return the timer status (ON/OFF)
.SS "bool getValv_Water_InWeb ()"

.PP
Get the Ind Alarm object\&. This function returns the state of the alarm indicator\&.

.PP
\fBReturns\fP
.RS 4
true 

.PP
false 
.RE
.PP

.SS "bool getValv_Water_OutWeb ()"

.PP
Get the Valv Water Out object\&. This function returns the state of the water out valve\&.

.PP
\fBReturns\fP
.RS 4
true 

.PP
false 
.RE
.PP

.SS "String handleHour ()"

.PP
Handle Hour\&. 
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function returns the timer hour 
.RE
.PP

.SS "String handleMinute ()"

.PP
Handle Minute\&. 
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function returns the timer minute 
.RE
.PP

.SS "String handleSecound ()"

.PP
Handle Secound\&. 
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function returns the timer secound 
.RE
.PP

.SS "String handleState (const String & state)"

.PP
Handlers for Auto, Pump, WaterOut, Resistor, WaterIn and WaterMax With Response\&. Handle State 
.PP
\fBParameters\fP
.RS 4
\fIstate\fP 
.RE
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function handles the state of the variable (auto, manual, pump, waterOut, resistor, waterIn, waterMax, waterMin, waterAlarm) 

.PP
This function returns the state of the variable (auto, manual, pump, waterOut, resistor, waterIn, waterMax, waterMin, waterAlarm) 
.RE
.PP
Get the state of the variable (auto, manual, pump, waterOut, resistor, waterIn, waterMax, waterMin, waterAlarm)

.PP
Get the auto mode indicator state

.PP
Get the manual mode indicator state

.PP
Get the pump state

.PP
Get the water out valve state

.PP
Get the resistor state

.PP
Get the water in valve state

.PP
Get the water max state

.PP
Get the water min state

.PP
Get the water alarm state

.PP
Return nothing if the state is not found
.SS "String handleTimeAdjust (const String & adjustment)"

.PP
Timer Add/Remove Time\&. Handle Time Adjust 
.PP
\fBParameters\fP
.RS 4
\fIadjustment\fP 
.RE
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function adjusts the timer 

.PP
This function returns the adjustment message for the timer (add1s, add5s, add10s, add1m, add5m, add10m, rem1s, rem5s, rem10s, rem1m, rem5m, rem10m) 
.RE
.PP
Adjust the timer based on the adjustment parameter

.PP
Add 1 secound to timer

.PP
Add 5 secounds to timer

.PP
Add 10 secounds to timer

.PP
Add 1 minute to timer

.PP
Add 5 minutes to timer

.PP
Add 10 minutes to timer

.PP
Remove 1 secound from timer

.PP
Remove 5 secounds from timer

.PP
Remove 10 secounds from timer

.PP
Remove 1 minute from timer

.PP
Remove 5 minutes from timer

.PP
Remove 10 minutes from timer

.PP
Return the adjustment message for the timer (add1s, add5s, add10s, add1m, add5m, add10m, rem1s, rem5s, rem10s, rem1m, rem5m, rem10m)
.SS "String handleTimer ()"

.PP
Handlers\&. Handlers\&.

.PP
Timer handlers

.PP
Handle Timer 
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function handles the timer 

.PP
This function returns the timer in the format HH:MM:SS 
.RE
.PP

.SS "String handleTimerControl (const String & control)"

.PP
Timer Start/Stop/Reset\&. Handle Timer Control 
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP 
.RE
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function controls the timer 

.PP
This function returns the control message for the timer (start, stop, reset) 
.RE
.PP
Control the timer based on the control parameter (start, stop, reset)

.PP
Start the timer

.PP
Stop the timer

.PP
Reset the timer

.PP
Return the control message for the timer (start, stop, reset)
.SS "String handleToggle (const String & toggle)"

.PP
Handlers for Toggle Auto, Pump, waterOut, Resistor, WaterIn and WaterMax\&. Handle Toggle 
.PP
\fBParameters\fP
.RS 4
\fItoggle\fP 
.RE
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function toggles the variable (auto, pump, waterOut, resistor, waterIn) 

.PP
This function returns the toggle message for the variable (auto, pump, waterOut, resistor, waterIn) 
.RE
.PP
Toggle the variable (auto, pump, waterOut, resistor, waterIn)

.PP
Toggle the auto mode indicator state

.PP
Toggle the pump state

.PP
Toggle the water out valve state

.PP
Toggle the water in valve state

.PP
Toggle the resistor state

.PP
Return the toggle message for the variable (auto, pump, waterOut, resistor, waterIn)
.SS "String handleWifiIP ()"

.PP
Handle Wifi IP\&. 
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function returns the WiFi IP address 
.RE
.PP

.SS "String handleWifiQuality ()"

.PP
Handlers for Wifi Quality, SSID, TX and IP\&. Handle Wifi Quality 
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function returns the WiFi quality in percentage 
.RE
.PP

.SS "String handleWifiSSID ()"

.PP
Handle Wifi SSID\&. 
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function returns the WiFi SSID 
.RE
.PP

.SS "String handleWifiTX ()"

.PP
Handle Wifi TX\&. 
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function returns the WiFi TX power 
.RE
.PP

.SS "void indicatorsManagement ()"
INDICATORS BLOCK

.PP
Set the maximum water level indicator

.PP
Set the minimum water level indicator

.PP
Set the alarm indicator

.PP
Set the manual mode indicator
.SS "void initSerial ()"

.PP
Set timer status\&. SERIAL Serial Functions calls

.PP
Set timer status\&.

.PP
Initialize Serial Communications with the default baud rate of 9600 bps

.PP
\fBNote\fP
.RS 4
This function is used to initialize the Serial Communications with the default baud rate of 9600 bps 

.PP
This function is called in the \fBsetup()\fP function of the main program 

.PP
This function is used to print the initial message to the Serial Terminal 
.RE
.PP
Initialize Serial Communications with the default baud rate of 9600 bps
.SS "bool initWIFI ()"

.PP
Initiate WiFi\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
\fBNote\fP
.RS 4
This function initiates the WiFi connection 
.RE
.PP
SoftAP flag to create a Soft Access Point only once

.PP
WIFI_MODE_OPTIONS

.PP
1 - Connect to local WiFi network only

.PP
2 - Create a local AP (SoftAP)

.PP
3 - Both (Connect to local WiFi network and create a local AP)

.PP
Initiate WiFi

.PP
Initiate WiFi in AP mode only

.PP
Initiate WiFi

.PP
Initiate WiFi in AP mode
.SS "void modeManagement ()"
MACHINE MODE MANAGEMENT BLOCK ///////////////////////////////////////////////////////////////////////////////////// If the machine is in manual mode, turn off the auto mode indicator

.PP
Toggle the auto mode

.PP
Set the auto mode indicator to the web value of the auto mode

.PP
Set the auto mode indicator to OFF

.PP
Set the auto mode to OFF in the web interface

.PP
If the machine is in manual mode, turn off the timer

.PP
Turn off the timer
.SS "String processor (const String & var)"

.PP
Function to handle the HTTP requests for the variables\&. Processor 
.PP
\fBParameters\fP
.RS 4
\fIvar\fP 
.RE
.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function processes the variables for the web server requests 

.PP
This function is called by the web server handle function (server\&.on) 

.PP
This function returns the variable value for the web server request 
.RE
.PP
Process the variable for the web server request (var) and return the variable value

.PP
Timer variable request

.PP
Return the timer value in the format HH:MM:SS

.PP
WaterMax variable request

.PP
Return the waterMax value

.PP
WaterMin variable request

.PP
Return the waterMin value

.PP
WaterAlarm variable request

.PP
Return the waterAlarm value

.PP
Auto variable request

.PP
Return the auto value

.PP
Manual variable request

.PP
Return the manual value

.PP
Pump variable request

.PP
Return the pump value

.PP
WaterOut variable request

.PP
Return the waterOut value

.PP
Resistor variable request

.PP
Return the resistor value

.PP
WaterIn variable request

.PP
Return the waterIn value

.PP
WifiQuality variable request

.PP
Return the wifiQuality value

.PP
WifiSSID variable request

.PP
Return the wifiSSID value

.PP
WifiTX variable request

.PP
Return the wifiTX value

.PP
WifiIP variable request

.PP
Return the wifiIP value

.PP
TimerHour variable request

.PP
Return the timerHour value

.PP
TimerMinute variable request

.PP
Return the timerMinute value

.PP
TimerSecound variable request

.PP
Return the timerSecound value

.PP
Return nothing if the variable is not found
.SS "void rem10m ()"

.PP
Remove 5 minutes from timer\&. Remove 5 minutes from timer\&. 
.SS "void rem10s ()"

.PP
Remove 5 secounds from timer\&. Remove 5 secounds from timer\&. 
.SS "void rem1m ()"

.PP
Remove 10 secounds from timer\&. Remove 10 secounds from timer\&. 
.SS "void rem1s ()"

.PP
Add 10 minutes to timer\&. Add 10 minutes to timer\&. 
.SS "void rem5m ()"

.PP
Remove 1 minute from timer\&. Remove 1 minute from timer\&. 
.SS "void rem5s ()"

.PP
Remove 1 secound from timer\&. Remove 1 secound from timer\&. 
.SS "void resetTimer ()"

.PP
Remove 10 minutes from timer\&. Remove 10 minutes from timer\&. 
.SS "void sendWiFiQuality ()"

.PP
MiddleWare Header\&. Function prototypes 
.SS "void setAutoModeWeb (bool state)"

.PP
SETS BLOCK\&. Set the Auto Mode object

.PP
This function sets the state of the auto mode\&.

.PP
\fBParameters\fP
.RS 4
\fIstate\fP 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
Static variable to store the old state

.PP
Set the auto indicator to ON

.PP
Set the old state to the current state

.PP
Set the auto indicator to OFF

.PP
Set the old state to the current state
.SS "void setPumpWeb (bool state)"

.PP
Set the Pump object\&. This function sets the state of the pump\&.

.PP
\fBParameters\fP
.RS 4
\fIstate\fP 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
Static variable to store the old state

.PP
Set the pump to ON

.PP
Set the old state to the current state

.PP
Set the pump to OFF

.PP
Set the old state to the current state
.SS "void setResistorWeb (bool state)"

.PP
Set the Resistor object\&. This function sets the state of the resistor\&.

.PP
\fBParameters\fP
.RS 4
\fIstate\fP 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
Static variable to store the old state

.PP
Set the resistor to ON

.PP
Set the old state to the current state

.PP
Set the resistor to OFF

.PP
Set the old state to the current state
.SS "void setTimer (bool stat)"

.PP
Reset timer\&. Reset timer\&.

.PP
\fBParameters\fP
.RS 4
\fIstat\fP 
.RE
.PP
Set the timer status (ON/OFF)
.SS "void setValveWaterInWeb (bool state)"

.PP
Set the Valve Water In object\&. This function sets the state of the water in valve\&.

.PP
\fBParameters\fP
.RS 4
\fIstate\fP 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
Static variable to store the old state

.PP
Set the water in valve to ON

.PP
Set the old state to the current state

.PP
Set the water in valve to OFF

.PP
Set the old state to the current state
.SS "void setValveWaterOutWeb (bool state)"

.PP
Set the Valve Water Out object\&. This function sets the state of the water out valve\&.

.PP
\fBParameters\fP
.RS 4
\fIstate\fP 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
Static variable to store the old state

.PP
Set the water out valve to ON

.PP
Set the old state to the current state

.PP
Set the water out valve to OFF

.PP
Set the old state to the current state
.SS "void sPrint (char * abc)"

.PP
Inicia a serial\&. Inicia a serial\&.

.PP
Print a string to the Serial Terminal 
.PP
\fBParameters\fP
.RS 4
\fIabc\fP 
.RE
.PP
\fBNote\fP
.RS 4
This function is used to print a string to the Serial Terminal with no line break 
.RE
.PP

.SS "void sPrintLn (char * abc)"

.PP
Print string\&. Print string\&.

.PP
\fBParameters\fP
.RS 4
\fIabc\fP 
.RE
.PP
\fBNote\fP
.RS 4
This function is used to print a string to the Serial Terminal with a line break 
.RE
.PP

.SS "void sPrintLnNbr (int nbr)"

.PP
Print string with new line\&. Print string with new line\&.

.PP
\fBParameters\fP
.RS 4
\fInbr\fP 
.RE
.PP
\fBNote\fP
.RS 4
This function is used to print a number to the Serial Terminal with a line break 
.RE
.PP

.SS "void sPrintLnStr (String abc)"

.PP
Print number\&. Print number\&.

.PP
\fBParameters\fP
.RS 4
\fIabc\fP 
.RE
.PP
\fBNote\fP
.RS 4
This function is used to print a string to the Serial Terminal with a line break 
.RE
.PP

.SS "void sPrintNbr (int nbr)"

.PP
Print string\&. Print string\&.

.PP
\fBParameters\fP
.RS 4
\fInbr\fP 
.RE
.PP
\fBNote\fP
.RS 4
This function is used to print a number to the Serial Terminal with no line break 
.RE
.PP

.SS "void sPrintStr (String abc)"

.PP
Print string with new line\&. Print string with new line\&.

.PP
\fBParameters\fP
.RS 4
\fIabc\fP 
.RE
.PP
\fBNote\fP
.RS 4
This function is used to print a string to the Serial Terminal with no line break 
.RE
.PP

.SS "void test_IO ()"

.PP
Print number with new line\&. Test I/Os

.PP
Print number with new line\&.

.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
Test I/O Indicador Maximo

.PP
Test I/O Indicador Minimo

.PP
Test I/O Indicador Alarme

.PP
Test I/O Indicador Manual

.PP
Test I/O Indicador Auto

.PP
Test I/O Indicador Valvula Entrada

.PP
Test I/O Indicador Valvula Saida

.PP
Test I/O Indicador Resistor
.SS "void toggleAutoMode ()"

.PP
Toggle the Auto Mode of the Machine using a switch connected to the ESP32 GPIO 4 (D4) 
.PP
\fBNote\fP
.RS 4
This function is used to toggle the Auto Mode of the Machine using a switch connected to the ESP32 GPIO 4 (D4) 
.RE
.PP
current state of the button

.PP
previous state of the button

.PP
current state of the button

.PP
the last time the output pin was toggled

.PP
the debounce time; increase if the output flickers

.PP
read the state of the switch into a local variable

.PP
If the switch changed, due to noise or pressing

.PP
reset the debouncing timer

.PP
if the switch value has been stable for a while

.PP
if the button state has changed

.PP
save the new state

.PP
if the button state is HIGH

.PP
Toggle Auto Mode

.PP
save the current state as the last state, for next time through the loop
.SS "void toggleAutoModeWeb ()"

.PP
TOGGLES BLOCK\&. Toggle Auto Mode Web

.PP
This function toggles the auto mode\&.

.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
Get the auto indicator state

.PP
Toggle the auto indicator state

.PP
Set the auto indicator state

.PP
Toggle the auto indicator state

.PP
Set the auto indicator state
.SS "void toggleIndAuto ()"

.PP
Toggle the Auto Mode of the Machine\&. 
.PP
\fBNote\fP
.RS 4
This function is used to toggle the Auto Mode of the Machine 
.RE
.PP

.SS "void togglePumpWeb ()"

.PP
Toggle Pump Web\&. This function toggles the pump\&.

.PP
\fBReturns\fP
.RS 4
void Toggle Pump 
.RE
.PP
Get the pump state

.PP
Toggle the pump state

.PP
Set the pump state

.PP
Print the pump state

.PP
Print the pump state

.PP
Toggle the pump state

.PP
Set the pump state

.PP
Print the pump state

.PP
Print the pump state
.SS "void toggleResistorWeb ()"

.PP
Toggle Resistor Web\&. This function toggles the resistor\&.

.PP
\fBReturns\fP
.RS 4
void Toggle Resistor 
.RE
.PP
Get the resistor state

.PP
Toggle the resistor state

.PP
Set the resistor state

.PP
Toggle the resistor state

.PP
Set the resistor state
.SS "void toggleValveWaterInWeb ()"

.PP
Toggle Valve Water In Web\&. This function toggles the water in valve\&.

.PP
\fBReturns\fP
.RS 4
void Toggle Valve Water In 
.RE
.PP
Get the water in valve state

.PP
Toggle the water in valve state

.PP
Set the water in valve state

.PP
Toggle the water in valve state

.PP
Set the water in valve state
.SS "void toggleValveWaterOutWeb ()"

.PP
Toggle Valve Water Out Web\&. This function toggles the water out valve\&.

.PP
\fBReturns\fP
.RS 4
void Toggle Valve Water Out 
.RE
.PP
Get the water out valve state

.PP
If the water out valve state is OFF and the manual mode is ON

.PP
Toggle the water out valve state

.PP
Set the water out valve state

.PP
Toggle the water out valve state

.PP
Set the water out valve state
.SS "void updateOutputsWeb ()"

.PP
Output variables image\&. FUNCTIONS BLOCK

.PP
Update Outputs Web

.PP
This function updates the outputs for the web interface\&.

.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
Update the resistor state

.PP
Update the pump state

.PP
Update the water out valve state

.PP
Update the water in valve state

.PP
Update the alarm state

.PP
Update the water min state

.PP
Update the water max state

.PP
Update the manual mode state

.PP
outputVarsImageWeb[7] = \fBgetIndAuto()\fP; /// Update the auto indicator state
.SS "long webTimer (String op, int16_t amount)"

.PP
Timer Functions calls\&. Timer Functions calls\&.

.PP
This function is responsible for managing the timer operations\&.

.PP
\fBParameters\fP
.RS 4
\fIop\fP 
.br
\fIamount\fP 
.RE
.PP
\fBReturns\fP
.RS 4
unsigned long 
.RE
.PP
Timer operations to add, remove or reset the timer value in miliseconds

.PP
Add time to the timer

.PP
Add 1 second

.PP
Add 5 seconds

.PP
Add 10 seconds

.PP
Add 1 minute

.PP
Add 5 minutes

.PP
Add 10 minutes

.PP
Remove time from the timer

.PP
Remove 1 second

.PP
Remove 5 seconds

.PP
Remove 10 seconds

.PP
Remove 1 minute

.PP
Remove 5 minutes

.PP
Remove 10 minutes

.PP
Reset the timer to 0

.PP
Timer management to decrease the timer every second and turn it off when it reaches 0 seconds left

.PP
Decrease the timer every second if the timer is ON

.PP
Turn off the timer when it reaches 0 seconds left

.PP
Only send updates at the defined interval

.PP
Send the timer to the web interface
.SS "String wifiQuality ()"

.PP
Inicia o wifi\&. Inicia o wifi\&.

.PP
\fBReturns\fP
.RS 4
String 
.RE
.PP
\fBNote\fP
.RS 4
This function returns the WiFi quality in percentage 
.RE
.PP
Get the Received Signal Strength Indicator (RSSI) in dBm

.PP
Quality in percentage

.PP
Quality in string format

.PP
Calculate the quality in percentage

.PP
Return the quality in string format with RSSI and quality in percentage values

.PP
Send the quality in percentage to the web server as a JSON object

.PP
Return the quality in string format with RSSI and quality in percentage values
.SH "Author"
.PP 
Generated automatically by Doxygen for IntelligentDestiller from the source code\&.
